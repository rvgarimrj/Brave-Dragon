/*
 * Copyright 2017 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

def helpText = """
This Gradle script performs the following:
- Adds Android maven repositories to search locations for artifacts.
- Adds user specified maven repositories to search locations for artifacts.
- Copies specified set of maven artifacts to the specified output directory.
- Displays the set of files copied into the output directory.
- Displays any packages that were not found.

./gradlew -b """ + project.buildscript.sourceFile + """ \\
  \"-PMAVEN_REPOS=[semicolon separated list of repo URIs]\" \\
  \"-PPACKAGES_TO_COPY=[semicolon separated list of maven artifacts]\" \\
  -PTARGET_DIR=[target directory]

ANDROID_HOME (required env var, system property or project property):
  Required environment variable, system property or project project that
  specifies the install location of the Android SDK.
MAVEN_REPOS (optional project property):
  Optional property which adds to the list of Maven repositories to search.
  This is a semicolon separated list of URIs e.g
  \"-PMAVEN_REPOS=http://some.repos.com;file:///some/other/path\"
  Since this property semicolon separated it needs to be quoted correctly
  when specified via some command line shells.
PACKAGES_TO_COPY (required project property):
  Semicolon separated list of Maven artifact specifications.  This will
  result in the script attempting to download the set of artifacts to
  TARGET_DIR.  Specified artifacts that are not copied to the target directory
  are logged to the standard output stream.
  e.g
  \"-PPACKAGES_TO_COPY=com.android.support:support-compat:26.0.1;\
com.android.support:support-core-utils:26.0.1\"
  Since this property semicolon separated it needs to be quoted correctly
  when specified via some command line shells.
TARGET_DIR (required project property):
  Directory to copy artifacts to.
  e.g -PTARGET_DIR=some/directory/to/copy/to
"""

buildscript {
  repositories {
    jcenter()
    mavenLocal()
    mavenCentral()
  }
}

configurations {
  // Configuration used to search the initial set of packages before applying
  // a fallback search strategy.
  userPackages
  // Set of packages with version locked dependencies.
  nonVersionLockedPackages
  // Configuration used to aggregate the set of packages we'll copy.
  copyPackages
}

// From a set of package specifiers generate a dictionary of versionless
// artifact filenames (e.g com.example:my-package:1.2.3 would become
// `ret[com.example:my-package:1.2.3] = "my-package"`).
// Incomplete package specifications e.g "com.example" are ignored.
//
// Returns a set of versionless artifacts by package specifier.
def getVersionlessArtifactByPackage(packages) {
  def versionlessArtifactByPackage = [:]
  packages.each {
    def groupArtifact = it.split(":")
    if (groupArtifact.size() >= 2) {
      versionlessArtifactByPackage[it] = groupArtifact[1]
    }
  }
  return versionlessArtifactByPackage
}

// From a set of package specifiers dictionary of package names indexed
// by group:artifact strings (e.g, com.example:my-package:1.2.3@aar would
// become ret[com.example:my-package] = "com.example:my-package:1.2.3")
// Package specifiers without at least a group and artifact are ignored.
def getGroupArtifacts(packages) {
  def groupArtifacts = [:]
  packages.each {
    def components = it.split(":")
    if (components.size() >= 2) {
      groupArtifacts[[components[0], components[1]].join(":")] = it
    }
  }
  return groupArtifacts;
}

// Given a set of versioned artifact File objects, generate a set of
// versionless artifact filenames.  All files without a version
// specifier are ignored.
//
// Returns a set of versioned artifact filenames.
def getVersionlessArtifactFilenames(versionedFiles) {
  Set versionlessFilenames = []
  versionedFiles.each {
    def path = it.name.toString()
    def versionIndex = path.lastIndexOf("-")
    if (versionIndex >= 0) {
      versionlessFilenames.add(path.substring(0, versionIndex))
    }
  }
  return versionlessFilenames
}

// Sort a list of version strings.
// The returned list contains a list of oldest to most recent version.
def sortVersionStrings(versions) {
  // The following sorts by comparing the indices of the versions.
  // If all common indices match, the longer of the two is more recent.
  return versions.sort(false) {
    a, b -> [a, b]*.tokenize('.')*.collect { it as int }.with {
      u, v -> [u, v].transpose().findResult {
        x, y -> x <=> y ?: null } ?: u.size() <=> v.size()
    }
  }
}

// Configure project properties.
project.ext {
  // Get the install location of the Android SDK.
  def sdkRoot = null
  for (prop in [System.getProperty("ANDROID_HOME"),
                project.hasProperty("ANDROID_HOME") ?
                  getProperty("ANDROID_HOME") : null,
                System.getenv("ANDROID_HOME")]) {
    if (prop) {
      sdkRoot = prop
      break
    }
  }
  if (!sdkRoot) {
    print helpText
    logger.error("Android SDK install location must be specified via " +
                 "ANDROID_HOME variable.")
    System.exit(1)
  }
  androidSdkRoot = sdkRoot

  def mavenUris = []
  // Retrieve a list of command line specified maven repo URIs.
  if (project.hasProperty("MAVEN_REPOS")) {
    project.getProperty("MAVEN_REPOS").tokenize(";").each {
      mavenUris.push(new URI(it))
    }
  }

  // Construct a list of local Maven URIs in the Android SDK.
  if (androidSdkRoot) {
    ["extras/android/m2repository", "extras/google/m2repository"].each {
      def path = new File(androidSdkRoot, it)
      if (path.exists()) mavenUris.push(path.toURI())
    }
  }
  // Add Google maven repositories.
  mavenUris.push(new URI("https://maven.google.com"))

  // List of URIs to add to the set of maven sources.
  mavenRepoUris = mavenUris

  // Add the repositories here so that we can resolve during configuration
  // below.
  project.repositories {
    for (uri in mavenRepoUris) {
      maven {
        url uri
      }
    }
    mavenLocal()
    jcenter()
    mavenCentral()
  }

  // Set of packages to copy to the target directory.
  if (!project.hasProperty("PACKAGES_TO_COPY")) {
    print helpText
    logger.error("Project property PACKAGES_TO_COPY must be specified.")
    System.exit(1)
  }
  Set packages = project.getProperty("PACKAGES_TO_COPY").tokenize(";")
  // Add user specified packages to the userPackages configuration.
  // This allows us to resolve during the configuration phase.
  packages.each { project.dependencies.userPackages it }

  // JarResolverLib will implicitly search for .srcaar artifacts in a maven
  // package in addition to aar and jar artifacts.  Since Gradle doesn't know
  // what a srcaar is and it's likely each POM doesn't reference the srcaar
  // either, we resolve dependencies during the configuration phase to
  // determine which packages are missing, add the srcaar artifact specifier
  // to search for srcarr files then search again in an attempt to resolve
  // the missing packages.
  def versionlessArtifactByPackage = getVersionlessArtifactByPackage(packages)
  def packagesToCopyByUserPackages = [:]
  def resolvedVersionlessArtifacts = getVersionlessArtifactFilenames(
    project.configurations.userPackages.resolvedConfiguration.
        lenientConfiguration.getFiles(Specs.satisfyAll()))
  versionlessArtifactByPackage.each {
    def pkg = it.key
    // If the package wasn't found and the artifact type isn't specified, try
    // searching for a srcaar artifact instead.
    if (!resolvedVersionlessArtifacts.contains(it.value) &&
        !pkg.contains("@")) {
      pkg += "@srcaar"
    }
    packagesToCopyByUserPackages[pkg] = it.key
  }

  packagesToCopyByUserPackages.each {
    project.dependencies.nonVersionLockedPackages it.key
  }

  // Resolve the current set of packages including any srcaar packages injected
  // in packagesToCopyByUserPackages.
  def resolvedArtifacts = project.configurations.nonVersionLockedPackages.
    resolvedConfiguration.lenientConfiguration.getArtifacts(
        Specs.satisfyAll())

  // Set of packages to copy, exposed to the copyPackages task.
  packagesToCopy = [:]
  // Set of packages with modified versions due to conflicting dependencies.
  packagesModified = []
  // Packages that should be version locked.
  def versionLockedModuleIds = [
    // * com.google.android.gms.* packages are released a single set that
    //   typically are not compatible between revisions.  e.g If a user depends
    //   upon play-services-games:9.8.0 they'll also require
    //   play-services-base:9.8.0 etc.
    // * com.google.firebase.* packages are versioned in the same way as
    //   com.google.android.gms.* with dependencies upon the gms (Play Services)
    //   components. and need to be pinned to the same com.google.android.gms.*
    //   packages.
    //   com.google.firebase.* packages that end with -unity$ are shipped
    //   separately so they are *not* locked to Google Play services and
    //   Firebase packages.  This is handled below by excludeModuleIds.
    ~/^com\.google\.(android\.gms|firebase):.*/,
    // com.android.support packages all need to be included at the same
    // revision.
    ~/^com\.android\.support:.*/,
  ]
  // Regular expression used to exclude packages from version locking.
  def excludeModuleIds = ~/^com\.google\.firebase:[^:]+-unity:.*/
  // Version lock packages.
  versionLockedModuleIds.each {
    def artifacts = []
    def versionLockedModuleId = it;
    // Scan the packages for ones that need to be version locked, add all
    // others to the set of packages to copy.
    resolvedArtifacts.each {
      def moduleVersionId = it.moduleVersion.id;
      def moduleVersionIdString = moduleVersionId.toString()
      def versionLockThisModule = (
        moduleVersionIdString ==~ versionLockedModuleId)
      // Ignore packages that match any regular expression in
      // versionLockedModuleIds except the one being evaluated
      // versionLockedModuleId.
      def versionLockedModule = false
      versionLockedModuleIds.each {
        versionLockedModule |= (versionLockedModuleId != it &&
                                moduleVersionIdString ==~ it)
      }
      if (versionLockedModule || moduleVersionIdString ==~ excludeModuleIds ||
          !versionLockThisModule) {
        if (!versionLockedModule) {
          def moduleWithType = [moduleVersionIdString, it.type].join("@")
          packagesToCopy[moduleWithType] = moduleWithType
        }
        return
      }
      artifacts += [it]
    }
    if (artifacts.size > 0) {
      // Pin each version locked package to the most recent version of
      // each package in the set.
      def maxVersion = sortVersionStrings(artifacts.collect {
                                            it.moduleVersion.id.version })[-1]
      artifacts.each {
        def moduleVersion = it.moduleVersion.id
        def newModuleVersion = [moduleVersion.group, moduleVersion.name,
                                maxVersion].join(":")
        def moduleWithType = [newModuleVersion, it.type].join("@")
        // Report modified packages due to conflicting dependencies here.
        if (moduleVersion.version != maxVersion) {
          packagesModified.add([moduleVersion.toString(),
                                newModuleVersion])
        }
        packagesToCopy[moduleWithType] = moduleWithType
      }
    }
  }

  // Scan for user specified artifacts that were not resolved and add them to
  // the list of packages to copy so they can be reported as missing.
  foundArtifacts = getGroupArtifacts(packagesToCopy.keySet())
  getGroupArtifacts(versionlessArtifactByPackage.keySet()).each {
    if (!foundArtifacts.keySet().contains(it.key)) {
      def moduleWithType = it.value + "@aar"
      packagesToCopy[moduleWithType] = moduleWithType
    }
  }

  // Location to copy referenced packages.
  if (!project.hasProperty("TARGET_DIR")) {
    print helpText
    logger.error("Project property TARGET_DIR must be specified.")
    System.exit(1)
  }
  targetDir = project.getProperty("TARGET_DIR")
}

// Generate tasks to copy Maven artifacts.
dependencies {
  project.ext.packagesToCopy.each { copyPackages it.key }
}

// Copy *available* Maven artifacts to the target directory.
task copyPackages(type: Copy) {
  from configurations.copyPackages.resolvedConfiguration.
      lenientConfiguration.getFiles(Specs.satisfyAll())
  into project.ext.targetDir
  // Rename .srcaar files to .aar in the target directory and track each
  // copied file.
  def copiedFiles = []
  rename {
    String filename ->
      def extensionIndex = filename.lastIndexOf(".")
      if (extensionIndex > 0) {
        def extension = filename.substring(extensionIndex)
        if (extension == ".srcaar") {
          filename = filename.substring(0, extensionIndex) + ".aar";
        }
      }
      copiedFiles.push(new File(filename));
      return filename
  }

  // Display:
  // * The set of files copied into the target directory.
  // * The dependency expression for each artifact that was not found.
  doLast {
    if (copiedFiles) {
      println "Copied artifacts:"
      copiedFiles.each { println it.name }
      println ""
    }
    def resolvedVersionlessArtifacts = getVersionlessArtifactFilenames(
      copiedFiles)
    def versionlessArtifactByPackage = getVersionlessArtifactByPackage(
      project.ext.packagesToCopy.keySet())
    def missingPackages = []
    versionlessArtifactByPackage.each {
      if (!resolvedVersionlessArtifacts.contains(it.value)) {
        missingPackages.push(project.ext.packagesToCopy[it.key])
      }
    }
    if (missingPackages) {
      println "Missing artifacts:"
      missingPackages.each { println it }
      println ""
    }
    def packagesModified = project.ext.packagesModified
    if (packagesModified) {
      println "Modified artifacts:"
      packagesModified.each { println it[0] + " --> " + it[1] }
      println ""
    }
  }
}

project.defaultTasks = ["copyPackages"]
